#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	iaddl $-7,%edx
	jle Pre_loop_8
Loop_8:	
	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 0x4(%ebx),%edi
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos1:
	rmmovl %edi, 0x4(%ecx)
	andl %edi,%edi
	jle Npos2
	iaddl $1, %eax
Npos2:	
	mrmovl 0x8(%ebx), %esi	# read val from src...
	mrmovl 0xc(%ebx), %edi
	rmmovl %esi, 0x8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos3:
	rmmovl %edi, 0xc(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos4:
	mrmovl 0x10(%ebx), %esi	# read val from src...
	mrmovl 0x14(%ebx), %edi
	rmmovl %esi, 0x10(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos5:
	rmmovl %edi, 0x14(%ecx)
	andl %edi,%edi
	jle Npos6
	iaddl $1, %eax
Npos6:	
	mrmovl 0x18(%ebx), %esi	# read val from src...
	mrmovl 0x1c(%ebx), %edi
	rmmovl %esi, 0x18(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos7		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos7:
	rmmovl %edi, 0x1c(%ecx)	# ...and store it to dst
	andl %edi, %edi		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos8:
	iaddl $0x20, %ebx		# src++
	iaddl $0x20, %ecx		# dst++
	iaddl $-8, %edx		# len--
	jg Loop_8			# if so, goto Loop:

Pre_loop_8:
	iaddl $7,%edx
	addl %edx,%edx
	addl %edx,%edx
	mrmovl End(%edx),%edx
	pushl %edx
	ret

Remainder7:
	mrmovl 0x18(%ebx),%esi
	rmmovl %esi,0x18(%ecx)
	andl %esi,%esi
	jle Remainder6
	iaddl $1,%eax
Remainder6:
	mrmovl 0x14(%ebx),%esi
	rmmovl %esi,0x14(%ecx)
	andl %esi,%esi
	jle Remainder5
	iaddl $1,%eax
Remainder5:
	mrmovl 0x10(%ebx),%esi
	rmmovl %esi,0x10(%ecx)
	andl %esi,%esi
	jle Remainder4
	iaddl $1,%eax
Remainder4:
	mrmovl 0xc(%ebx),%esi
	rmmovl %esi,0xc(%ecx)
	andl %esi,%esi
	jle Remainder3
	iaddl $1,%eax
Remainder3:
	mrmovl 0x8(%ebx),%esi
	rmmovl %esi,0x8(%ecx)
	andl %esi,%esi
	jle Remainder2
	iaddl $1,%eax
Remainder2:
	mrmovl 0x4(%ebx),%esi
	rmmovl %esi,0x4(%ecx)
	andl %esi,%esi
	jle Remainder1
	iaddl $1,%eax
Remainder1:
	mrmovl (%ebx),%esi
	rmmovl %esi,(%ecx)
	andl %esi,%esi
	jle Remainder0
	iaddl $1,%eax
Remainder0:


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
	.long	Remainder0
	.long	Remainder1
	.long	Remainder2
	.long	Remainder3
	.long	Remainder4
	.long	Remainder5
	.long	Remainder6
	.long	Remainder7
#/* $end ncopy-ys */
